import discord
from discord.ext import commands
from naomi_paginator import Paginator
from asyncio import sleep
from random import randint

class Info(commands.Cog):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ"""
    def __init__(self, bot):
        self.bot = bot

    @commands.command(aliases=["links", "inv", "git", "github", "support", "supportServer"])
    async def invite(self, ctx):
        """ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –±–æ—Ç–∞ –Ω–∞ –≤–∞—à —Å–µ—Ä–≤–µ—Ä """

        invite = lambda code: discord.utils.oauth_url(self.bot.user.id, discord.Permissions(code)) # code variable receives int for permissions value

        emb = discord.Embed(
            title="–ö–∞—Å—Ç–æ–º–∏–∑–∏—Ä—É–π—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞",
            description=f"[–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å–æ –≤—Å–µ–º–∏ –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏]({invite(-1)})",
            color=discord.Colour.gold())

        emb.add_field(
            name="–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –±–æ—Ç–∞ –±–µ–∑ –ø—Ä–∞–≤",
            value=f"[–ë–æ—Ç –Ω–µ —Å–æ–∑–¥–∞—Å—Ç —Å–≤–æ—é –ª–∏—á–Ω—É—é —Ä–æ–ª—å]({invite(0)})",
            inline=False)
        
        emb.add_field(
            name="–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –±–æ—Ç–∞ —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            value=f"[–ë–æ—Ç –±—É–¥–µ—Ç –∏–º–µ—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞]({invite(8)})",
            inline=False)

        invite = self.bot.config.get('supportServerInvite')
        donate = self.bot.config.get('donationURL')

        emb.add_field(
            name="–î—Ä—É–≥–∏–µ —Å—Å—ã–ª–∫–∏",
            value=f"[–ü–æ—Å–µ—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –±–æ—Ç–∞]({invite})\n"
            "[GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –±–æ—Ç–∞](https://github.com/tuxlabore/flasher)\n"
            f"[–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è]({donate})",
            inline=False)

        emb.set_footer(text=f"{ctx.prefix}{ctx.command}")

        await ctx.send(embed=emb)


    @commands.command(name="help", aliases=["commands", "cmds"])
    async def help(self, ctx, *, command: str = None):
        """–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º."""
        if command:   
            cmd = self.bot.get_command(command)
            if not cmd:                                                                             # If bot.get_command cannot found command it returns None
                notFoundEmbed = discord.Embed(title=f'–ù–∞–º –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–º–º–∞–Ω–¥—É {ctx.prefix}{command}',
                    color=discord.Colour.dark_red())    

                notFoundEmbed.set_footer(text=f'{ctx.prefix}{ctx.command} - {ctx.command.help}') # i'm so lazy for copy-paste description

                return await ctx.send(embed=notFoundEmbed, 
                                      delete_after=10)

            commandEmbed = discord.Embed(title=f'{ctx.prefix}{cmd.qualified_name} {cmd.signature}',       # outputs something like f.help <command> 
                                         description=cmd.help or '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ')
            commandEmbed.set_footer(text=f'{ctx.prefix}{ctx.command}', icon_url=ctx.author.avatar_url)

            if cmd.aliases:
                aliases = ','.join(cmd.aliases)
                commandEmbed.add_field(name='–í–∞—Ä–∏–∞–Ω—Ç—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è',      # f.help command -> 'commands, cmds' (string)
                                       value=aliases, inline=False)

            if type(cmd) is commands.Group:
                subCmds = cmd.commands
                subCmds = ', '.join([command.name for command in subCmds]) # f.prefix command -> 'self, guild' (string)
                commandEmbed.add_field(name='–ü–æ–¥–∫–æ–º–∞–Ω–¥—ã', 
                                       value=subCmds)

            return await ctx.send(embed=commandEmbed, delete_after=120)

        p = Paginator(ctx) # naomi_paginator init, here starts answer if command arg not provided        
        i = 0
        skipped = 0
        cogs = []

        for cog_name in self.bot.cogs:  # self.bot.cogs returns list with strings
            cog = self.bot.get_cog(cog_name)
            cogs.append(cog)

        for cog in cogs:

            cog_name = cog.__class__.__doc__.partition('\n') # "Name\nDescription\n2" -> ('Name','\n','Description\n2')
            cog_name = cog_name[0]                           # We need the only name.
            

            cmds = [cmd.name 
                   for cmd in self.bot.commands 
                   if not cmd.hidden 
                   and cmd.cog_name is cog.__class__.__name__]

            
            if not cmds:        # [] case
                skipped += 1        
                continue

            i += 1

            cmds = [f'`{cmd}`' for cmd in cmds]
            cmds = ', '.join(cmds)

            embedPage = discord.Embed(title=ctx.command.help,
                                      color=randint(0x000000, 0xFFFFFF),
                                      timestamp=ctx.message.created_at)
            embedPage.add_field(name=cog_name,
                                value=cmds,)
            embedPage.set_thumbnail(url=self.bot.user.avatar_url)
            embedPage.set_footer(text=f'{ctx.prefix}{ctx.command} [–∫–æ–º–∞–Ω–¥–∞] –¥–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏',
                                 icon_url=ctx.author.avatar_url)
            
            p.add_page(embedPage)
        
        await p.call_controller()    






    @commands.command(aliases=["üèì", "pong", "latency"])
    async def ping(self, ctx):
        await ctx.send(f":ping_pong: {round(self.bot.latency * 1000)}ms")

def setup(bot):
    cog = Info(bot)
    bot.add_cog(cog)  